### C++基础

+ **第二章：c++概述**

  + 特点：保持与c兼容，易用性，高效性，适合大型软件开发（面向对象）
  + cout、cin：流类对象；<<：插入符，提供屏幕输出；>>：提取符，提供键盘输入；endl：换行
  + 类的文件有.h和.cpp，.h里面声明类，申明方法而不写函数体具体内容，.cpp 写明函数具体内容，修改时只需修改编译.cpp文件，便与程序维护。
  + c++编译过程：先编译，后连接，从最开始.cpp 变成.obj，再变成.exe可执行文件
  + const修饰符冻结变量使之不可改变
  + 内联函数：频繁调用一个函数时，可以将函数定义为内联函数，定义方式是定义和申明时在函数名前面加上inline，这样就为编译器提供了另一种选择，可以在使用函数时不调用而是直接用代码替换，这样做的好处是可以提高代码速度，但是会增加内存占用。
  + 函数重载：功能相似或者相近的函数可以使用相同的函数名，但是使用不同的形参——形参类型不同或者个数不同。
  + 同名变量，局部变量在作用域内优先级高于全局变量，**::**是作用域运算符，可以使用被隐藏的全局变量，只需在变量名之前加上**::**
  + 强制转换时，只得到转换的中间变量，原来变量的类型不发生变化。
  + c语言中，动态分配内存与释放空间使用malloc()和free()函数，但在c++中，使用**new()和delete()**函数。new和delete的优点：new可以**自动计算**要分配内存的类型的大小，不必使用sizeof计算大小，减少了错误发生的可能性；new能自动返回正确的指针类型，**不必对返回指针进行类型转换**；可以用new将分配的对象**初始化**；new和delete都允许被重载，允许建立自定义的分配系统。
  + 引用reference：申明引用与定义指针类似，只不过将\*换成\&，可以为变量起别名，主要用作函数参数以及函数的返回类型。引用定义时必须立即进行初始化，不能完成定义后再赋值。引用实际上是一种隐式指针，不用写\*，简化了程序。不能建立引用数组，指向引用的指针，引用的引用。用&取一个引用的地址时，其值为所引用的变量的地址。*引用返回值不能是函数内部的局部变量*。**引用之代码未看**

+ **第三章：类和模板**

  - 结构体与类：区别是结构体中的成员默认是公有的，类中的成员默认是私有的，其他方面类和结构体等价，但是一般来说，描述**数据**时使用结构体，描述**数据及数据的操作**时使用类。**在类体中不允许定义数据成员时就给其赋初值，只能在定义之后才能赋初值**
  - 类的内部函数定义，可以在定义类时就一次定义申明，也可以先申明，再在类外面用域运算符定义，例如：void  class_1 :: setdate () {};
  - 对象是类的变量，也叫类的实例
  - 类访问内部成员使用：对象名**.**数据成员名，指向对象的指针访问内部成员使用：指针->数据成员名，通过对象的引用访问和使用对象名访问方式一致。
  - 构造函数与析构函数
    - 构造函数：在创建对象时，为对象**分配存储空间**，也可以同时对它的数据成员**赋初值**。构造函数的名字必须和类名相同，构造函数不能具有返回类型和返回值，可以具有任意类型的参数。构造函数可以写在类内也可以写在类外。构造函数虽然是公有的，但是**不能显示调用**，由编译器自动调用，且如果没有写构造函数编译器会自动生成一个缺省的构造函数。**构造函数可以重载**。
    - 析构函数：在撤销类的对象时，回收存储空间，并做一些善后工作。析构函数的名字与类名相同并在其前面加上\~字符；析构函数没有参数，没有返回值，不能重载，一个类中只能定义一个析构函数。在对象的生存期结束的时刻自动调用，并释放此对象所属的空间。默认的析构函数不涉及清理用户申请的内存的释放工作，如有需要则需要显式的定义。
  - 对象数组：有一个数组初始化的问题：[点击这里](https://blog.csdn.net/feifei_csdn/article/details/77543073)。
  - this指针：this指针指向正在被某个成员函数操作的对象。
  - string**类**：头文件\<string\>，可以用+、=、+=、<、>、>>等运算符。
  - 对象的赋值和复制：同类对象赋值，所有的数据成员都逐位拷贝，且对象的数据相同，对象仍是分离的，当类中存在指针时可能出现错误。
  - 拷贝构造函数：一般对象赋值时比较简单，但是类对象一般存在多个变量，赋值情况也较为复杂。当用一个已初始化过了的自定义类类型对象去初始化另一个新构造的对象的时候，其拷贝构造函数就会被自动调用。以下情况都会调用拷贝构造函数：**一个对象以值传递的方式传入函数体 、一个对象以值传递的方式从函数返回、一个对象需要通过另外一个对象进行初始化**。如果没有自定义拷贝构造函数，编译器会自动生成一个默认的拷贝构造函数进行位拷贝，这就是**浅拷贝**，浅拷贝只是对位一个一个赋值，并不进行资源的另分配，对于指针也不会另外开辟空间，而深拷贝则与此相反，在拷贝的同时开辟新空间（如有需要）和资源重分配。**深拷贝**和**浅拷贝**可以简单理解为：如果一个类拥有资源，当这个类的对象发生复制过程的时候，资源重新分配，这个过程就是深拷贝，反之，没有重新分配资源，就是浅拷贝。
  - 友元：friend。

+ **第四章：派生类与继承**

  + 派生类：class  派生类名：继承方式  基类名{ }；。

  + 派生类访问属性
    + 不管以什么方式继承，都不可访问基类中的私有成员。
    + 基类中的其他成员按照继承方式，以最低权限度进行访问。即：两者取其更**保护**的方向。

  + 派生类的构造函数和析构函数执行顺序

    + 构造函数调用顺序：先基类后派生类
    + 析构函数调用顺序：先派生类后基类（与构造函数相反）

  + 基类的构造函数不能被继承，需要在派生类中自行声明，声明时，只需要对本类中新增成员进行初始化，对继承来的基类成员的初始化由基类完成。派生函数的构造函数一般格式为：

    派生类名（参数总表）：基类名（参数表）{派生类新增数据成员的初始化语句}

  + 析构函数也不能被继承，但由于析构函数不带参数，在派生类的析构函数中不需要显式调用基类的析构函数，只负责本类的析构即可。各个析构函数是各自独立的。

  + 当派生类与基类中有相同成员时，若未指明，则通过派生类对象使用的是派生类中的同名成员，如要通过派生类对象访问基类中被覆盖的同名成员，应使用基类名限定：基类名：：成员名

  + 多重继承：class 派生类名：继承方式1 基类名，继承方式n 基类名n……{……}；其中缺省继承方式则默认为private。

  + 多重继承的构造函数：多继承中，当一个类是派生类，同时有**对象成员**时，构造函数和析构函数的调用顺序如下，构造函数调用顺序：

    1. 基类的构造函数：按被继承的顺序。
    2. 成员对象的构造函数：按声明的顺序。
    3. 派生类自身的构造函数。

    析构函数调用顺序：和构造函数调用顺序相反。

  + 如果想让某个公共基类在派生类中只产生一个拷贝，可以将其说明为虚基类。定义格式：

    class 派生类名：virtual 继承方式 基类名 {……}；其中virtual和继承方式可以颠倒顺序。一个基类在使用时可以作某些派生类的虚基类，同时又作其他某些派生类的非虚基类。

+ **第五章：多态性**

  + 多态性的表现：函数重载、运算符重载、派生类对基类成员函数的重定义、动态类型+继承+虚函数、模板

  + 运算符重载：**用类成员函数重载、用友元函数重载**，定义**函数名为operator@**，这样当编译时遇到这个运算符，且它两边参数是**自定义类对象**时，系统会调用该类重载的运算符函数。定义方式如下：

    + 成员函数重载方式：

      ```complex  complex::operator+(complex& c) ```

      ```{complex temp; ```

       ```temp.real=real+c.real; ```

      ```temp.imag=imag+c.imag; ```

      ```return temp; }```

    + 或友元函数重载方式：

      ```complex  operator+(complex c1,complex c2) {......}```

  + 调用形式：显示调用或者隐式调用。显示：c3 = operator(c1,c2)；隐式：c3=c1+c2；

  + **！**成员函数重载和友元函数重载及其各类运算符的具体细节

  + 类型转换

    + 系统预定义类型之间的转换：隐式转换和显示转换
    + 类类型与系统预定义类型间的转换：构造函数和类类型转换函数

  + 虚函数：虚函数是一种动态的重载方式，虚函数允许函数调用与函数体之间的联系在运行时才建立，也就是运行时才决定如何动作，即所谓的动态联编，实现更灵活的多态性机制。

    虚函数**定义**：虚函数就是在基类中被关键字virtual说明，并在派生类中重新定义的函数，在派生类中重新定义时，其函数原型，包括返回类型、函数名、参数个数与参数类型的顺序，都必须与基类中的原型完全相同。**定义方式**：virtual <类型说明符> <函数名>(<参数表>) {  ……  }

    虚函数必须是类的成员函数，不能是友元或静态成员函数，因为要靠类对象来决定激活函数。

    虚函数必须是public或protected权限，才能在公有派生类中被访问。

    一个虚函数无论被派生多少次，其仍然是虚函数，在派生类中定义时首部必须完全相同，virtual关键字可不写，当继承层次较多时，最好都写上virtual关键字。

    **构造函数不能为虚函数**，因为要创建具体对象必须知道其确切类型，也不必再创建一次已存在对象。但是**析构函数可以是虚函数**。

  + 纯虚函数和抽象类

    + 纯虚函数：纯虚函数是一个在基类中说明的虚函数，他在该基类中没有定义，但要求在他的派生类中定义自己的版本。纯虚函数的一般形式如下：**virtual 返回类型 函数名（参数表）=0**，纯虚函数仅为派生类提供一个一致接口的作用。

    + 抽象类：如果一个类中至少含有一个纯虚函数，则该类为抽象类。

      抽象类只能作为其他类的基类，不能建立抽象类对象。

      抽象类不能作为函数值形参类型、函数返回类型或显示转换的类型。

      如果在抽象类的派生类中没有定义纯虚函数而只是继承，那么这个类仍然是一个抽象类。

+ **第六章：模板**

  + 模板的引入：一个最重要的目的就是简化编程。由于C++是**强类型语言**，许多类似功能(函数或类)只要数据类型不同，就必须定义多份，不但使源程序增长，工作量也加大。

  + 模板的概念：通过类型参数化来实现代码重用——即把数据类型定义为**参数**，使用时才给出具体类型来实例化类型参数。模板分为函数模板和类模板。

  + 函数模板和模板函数：所谓**函数模板**，就是写一个函数模子，用这个模子套印出许多功能相同，参数类型和返回类型不同的函数。**模板函数**：函数模板实例化后的具体函数。

  + 函数模板的声明格式如下：

    ```template <class type> ```

    ```返回类型 函数名(模板形参表)```

    ```{函数体……}```

    具体例如：

    ```template <class type,class type2,……>```

    ```type max(type a,type b)```

    ```{ return(a>b)?a:b } ```

  + 调用时，直接传入不同类型的参数，即可返回不同类型的结果。

  + 函数模板的异常处理：

    c++中函数调用的一般顺序为：

    1. 寻找一个参数完全匹配的函数，若找到则调用之，否则转2
    2. 寻找一个函数模板，若找到则将其实例化为一个模板函数，然后调用之，否则转3
    3. 寻找重载函数，考察有无可通过类型转换产生参数匹配的函数，若有则调用之。

  + **类模板** (也称为类属类或类生成类)是：允许用户为类定义一种模式，使得类中的某些数据成员，某些成员函数的参数或者返回值，能取任意数据类型。
